// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  USER
  ADMIN
}

model User {
  id     String  @id @default(cuid())
  email  String  @unique
  name   String
  role   Role    @default(USER)
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                   String  @id @default(cuid())
  name                 String
  description          String
  priceInCents         Int
  imageSource          String
  availableForPurchase Boolean

  tags       ProductTag[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id       String       @id @default(cuid())
  name     String       @unique
  products ProductTag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductTag {
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  tagId String
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([productId, tagId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

model Order {
  id               String      @id @default(cuid())
  status           OrderStatus @default(PENDING)
  totalPaidInCents Int

  orderItems OrderItem[]
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id               String @id @default(cuid())
  pricePaidInCents Int
  quantity         Int

  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
